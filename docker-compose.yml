x-restart_policy: &restart_policy
  restart: unless-stopped

x-logging: &logging
  logging:
    driver: "local"
    options:
      max-size: "10m"
      max-file: "5"

x-depends-database: &depends-database
  dripdrop-postgres:
    condition: service_healthy

x-depends-redis: &depends-redis
  dripdrop-redis:
    condition: service_healthy

x-depends-all: &depends-all
  depends_on:
    <<:
      - *depends-database
      - *depends-redis

services:
  dripdrop-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dripdrop-server
    command: ["./scripts/server.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthcheck"]
      interval: 30s
    environment:
      ENV: ${ENV}
    volumes:
      - type: bind
        source: ./
        target: /src
    ports:
      - 5000:5000/tcp
    <<:
      - *depends-all
      - *logging
      - *restart_policy

  dripdrop-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["./scripts/worker.sh"]
    environment:
      ENV: ${ENV}
      REDIS_URL: ${REDIS_URL}
    volumes:
      - type: bind
        source: ./
        target: /src
    <<:
      - *depends-all
      - *logging
      - *restart_policy

  dripdrop-postgres:
    image: postgres:17
    container_name: dripdrop-postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE}"]
      interval: 30s
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - type: volume
        source: postgres_volume
        target: /var/lib/postgresql/data
    ports:
      - 5432:5432
    <<:
      - *logging
      - *restart_policy

  dripdrop-redis:
    image: redis
    container_name: dripdrop-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
    volumes:
      - type: volume
        source: redis_volume
        target: /data
    ports:
      - 6379:6379
    <<:
      - *logging
      - *restart_policy

volumes:
  postgres_volume: {}
  redis_volume: {}
  temp_volume: {}
